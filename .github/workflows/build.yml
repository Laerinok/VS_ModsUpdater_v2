name: Build Binaries

on:
  workflow_dispatch:

jobs:
  build_windows:
    name: Build Executable (Windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Get App Version
        id: get_version
        shell: bash
        run: echo "APP_VERSION=$(python -c 'import app_version; print(app_version.__version__)')" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx-freeze setuptools
          pip install -r requirements.txt
      - name: Build the executable
        run: python setup.py build_exe
      - name: Archive executable with version
        run: powershell Compress-Archive -Path build/exe.win-amd64-3.12 -DestinationPath VS_ModsUpdater.v${{ env.APP_VERSION }}_Windows.zip
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: VS_ModsUpdater.v${{ env.APP_VERSION }}_Windows
          path: VS_ModsUpdater.v${{ env.APP_VERSION }}_Windows.zip

  build_linux:
    name: Build AppImage (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Get App Version
        id: get_version
        run: echo "APP_VERSION=$(python -c 'import app_version; print(app_version.__version__)')" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx-freeze setuptools
          pip install -r requirements.txt
      - name: Install Linux dependencies
        run: sudo apt-get update && sudo apt-get install -y patchelf desktop-file-utils libgdk-pixbuf2.0-dev fakeroot
      - name: Build AppImage
        run: python setup.py bdist_appimage
      - name: Rename AppImage with version
        run: mv dist/*.AppImage dist/VS_ModsUpdater.v${{ env.APP_VERSION }}_Linux.AppImage
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: VS_ModsUpdater.v${{ env.APP_VERSION }}_Linux
          path: dist/VS_ModsUpdater.v${{ env.APP_VERSION }}_Linux.AppImage

  build_macos:
    name: Build DMG (macOS)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install create-dmg
        run: brew install create-dmg
      - name: Get App Version
        id: get_version
        run: echo "APP_VERSION=$(python -c 'import app_version; print(app_version.__version__)')" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx-freeze setuptools
          pip install -r requirements.txt
      - name: Build the DMG
        run: python setup.py bdist_dmg
      - name: Rename DMG with version
        run: mv dist/*.dmg dist/VS_ModsUpdater.v${{ env.APP_VERSION }}_macOS.dmg
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: VS_ModsUpdater.v${{ env.APP_VERSION }}_macOS
          path: dist/VS_ModsUpdater.v${{ env.APP_VERSION }}_macOS.dmg
