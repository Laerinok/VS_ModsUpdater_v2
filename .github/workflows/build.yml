name: Create Release

on:
  push:
    branches:
      - "main"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build_and_release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            asset_name: "VS_ModsUpdater-${{ github.ref_name }}-Windows.zip"
            asset_path: "build/exe.win-amd64-3.12"
            build_command: "python setup.py build_exe"
            archive_command: "powershell Compress-Archive -Path build/exe.win-amd64-3.12 -DestinationPath VS_ModsUpdater-${{ github.ref_name }}-Windows.zip"
            release_asset_path: "VS_ModsUpdater-${{ github.ref_name }}-Windows.zip"
          - os: ubuntu-latest
            asset_name: "VS_ModsUpdater-${{ github.ref_name }}-Linux.AppImage"
            asset_path: "dist/*.AppImage"
            build_command: |
              sudo apt-get update
              sudo apt-get install -y patchelf desktop-file-utils libgdk-pixbuf2.0-dev fakeroot
              python setup.py bdist_appimage
            archive_command: ""
            release_asset_path: "dist/*.AppImage"
          - os: macos-latest
            asset_name: "VS_ModsUpdater-${{ github.ref_name }}-macOS.dmg"
            asset_path: "dist/*.dmg"
            build_command: "python setup.py bdist_dmg"
            archive_command: ""
            release_asset_path: "dist/*.dmg"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx-freeze setuptools
          pip install -r requirements.txt

      - name: Build the application
        run: ${{ matrix.build_command }}

      - name: Archive executable (Windows only)
        if: matrix.os == 'windows-latest' && matrix.archive_command != ''
        run: ${{ matrix.archive_command }}

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.release_asset_path }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
